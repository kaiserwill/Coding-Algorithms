//3 Sum Problem
//Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0?
//Find all unique triplets in the array which gives the sum of zero.

//Note:
//Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
//The solution set must not contain duplicate triplets.

//For example, given array S = {-1 0 1 2 -1 -4},
// A solution set is:
// (-1, 0, 1)
//(-1, -1, 2)

#include<vector>

//helper function that checks if the result contains a potential solution already
bool contain(vector<vector<int> > r, vector<int> t){
  
  int len = r.size();
  for(int i=0; i<len; i++){
    if(r[i][0]==t[0] && r[i][1]==t[1] && r[i][2]==t[2])
      return true;
  }
  return false;
}

vector<vector<int> > threeSum(vector<int> &num){
  
  int len = num.size();
  vector<vector<int> > result;

  //edge case 1: the vector is smaller than 3 elements
  if(len<3) { return result; }
  
  int input1 = 0;
  int input2 = 1;
  vector<int> temp;
  
  //setting input1 and input2 constant and comparing the rest of the vector with these two elements
  //updates input1 and input2 at the end of every iteration
  for(int i=2; i<len; i++){
    for(int input3 = i; input3<len; input3++){
      if(num[input1]+num[input2]+num[input3] == 0){
        temp.push_back(num[input1]);
        temp.push_back(num[input2]);
        temp.push_back(num[input3]);
        sort(temp.begin(), temp.end());
        if(!contain(result, temp))
          result.push_back(temp);
      }
    }
    input1++;
    input2++;
  }

  sort(result.begin(), result.end());
  return result;
}
